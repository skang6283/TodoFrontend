{"ast":null,"code":"var _jsxFileName = \"/Users/seongwookang/Projects/untitled/frontend/todo/src/components/Signup/Signup.js\";\nimport React, { Component } from 'react';\nimport Input from '../UI/Input/Input';\nimport Button from '../UI/Button/Button';\nimport PropTypes from 'prop-types';\nimport { Link, Redirect } from 'react-router-dom';\nimport Header from '../Header/Header';\nimport Toolbar from '../Toolbar/Toolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Signup extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Email'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6,\n            password1: true\n          },\n          valid: false,\n          touched: false\n        },\n        password2: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Verify Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6,\n            verifyPassword: true\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: false\n    };\n\n    this.checkValidity = (value, rules) => {\n      let isValid = true;\n\n      if (!rules) {\n        return true;\n      }\n\n      if (rules.required) {\n        isValid = value.trim() && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      if (rules.isEmail) {\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        isValid = pattern.test(value) && isValid;\n      }\n\n      if (rules.isNumeric) {\n        const pattern = /^\\d+$/;\n        isValid = pattern.test(value) && isValid;\n      }\n\n      if (rules.verifyPassword) {\n        isValid = value === this.state.controls.password.value && isValid;\n      }\n\n      if (rules.password1) {\n        console.log('hi');\n      } else {\n        console.log('123');\n      }\n\n      return isValid;\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      let updatedControls = null;\n\n      if (controlName === 'password') {\n        updatedControls = { ...this.state.controls,\n          [controlName]: { ...this.state.controls[controlName],\n            value: event.target.value,\n            valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n            touched: true\n          }\n        };\n        this.setState({\n          controls: updatedControls\n        });\n        updatedControls = { ...this.state.controls,\n          ['password2']: { ...this.state.controls['password2'],\n            valid: this.checkValidity(this.state.controls['password2'].value, this.state.controls['password2'].validation)\n          }\n        };\n        this.setState({\n          controls: updatedControls\n        });\n        console.log(this.state);\n      } else {\n        updatedControls = { ...this.state.controls,\n          [controlName]: { ...this.state.controls[controlName],\n            value: event.target.value,\n            valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n            touched: true\n          }\n        };\n      }\n\n      this.setState({\n        controls: updatedControls\n      });\n    };\n  }\n\n  render() {\n    const formElementsArray = [];\n    let valid = true;\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n      valid = this.state.controls[key].valid && valid;\n    }\n\n    let form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id)\n    }, formElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ui three column centered grid\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ui column\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ui attached segment\",\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              className: \"ui form\",\n              onSubmit: this.submitHandler,\n              children: [form, /*#__PURE__*/_jsxDEV(Button, {\n                btnType: \"teal\",\n                disabled: !valid,\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Signup;","map":{"version":3,"sources":["/Users/seongwookang/Projects/untitled/frontend/todo/src/components/Signup/Signup.js"],"names":["React","Component","Input","Button","PropTypes","Link","Redirect","Header","Toolbar","Signup","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","password1","password2","verifyPassword","isSignup","checkValidity","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","console","log","inputChangedHandler","event","controlName","updatedControls","target","setState","render","formElementsArray","key","push","id","config","form","map","formElement","submitHandler"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Input from '../UI/Input/Input';\nimport Button from '../UI/Button/Button';\n\nimport PropTypes from 'prop-types';\nimport { Link,Redirect } from 'react-router-dom';\n\nimport Header from '../Header/Header'\nimport Toolbar from '../Toolbar/Toolbar'\n\nclass Signup extends Component {\n  state={\n    controls:{\n      email:{\n        elementType: 'input',\n        elementConfig:{\n          type: 'email',\n          placeholder: 'Email'\n        },\n        value:'',\n        validation:{\n          required:true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false\n      },\n      password:{\n        elementType: 'input',\n        elementConfig:{\n          type: 'password',\n          placeholder: 'password'\n        },\n        value:'',\n        validation:{\n          required:true,\n          minLength:6,\n          password1:true,\n        },\n        valid: false,\n        touched: false,\n      },\n      password2:{\n        elementType: 'input',\n        elementConfig:{\n          type: 'password',\n          placeholder: 'Verify Password'\n        },\n        value:'',\n        validation:{\n          required:true,\n          minLength:6,\n          verifyPassword:true,\n        },\n        valid: false,\n        touched: false,\n      }\n    },\n    isSignup:false,\n  }\n\n  checkValidity=(value,rules)=>{\n    let isValid = true;\n\n    if ( !rules ) {\n      return true;\n    }\n\n    if (rules.required){\n      isValid = value.trim() && isValid;\n    }\n\n    if (rules.minLength){\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength){\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail){\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test( value ) && isValid\n    }\n\n    if (rules.isNumeric){\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value)&&isValid;\n    }\n\n    if (rules.verifyPassword){\n      isValid = value === this.state.controls.password.value && isValid;\n    }\n\n    if(rules.password1){\n      console.log('hi')\n    }else{\n      console.log('123')\n    }\n\n\n\n\n    return isValid;\n  }\n\n  inputChangedHandler=(event, controlName)=>{\n    let updatedControls = null\n    if (controlName==='password'){\n      updatedControls ={\n        ...this.state.controls,\n        [controlName]:{\n          ...this.state.controls.[controlName],\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched:true\n        },\n        \n\n\n      };\n      this.setState({controls: updatedControls});\n\n      updatedControls ={\n        ...this.state.controls,\n        ['password2']:{\n          ...this.state.controls.['password2'],\n          valid: this.checkValidity(this.state.controls['password2'].value, this.state.controls['password2'].validation),\n        },\n      };\n      this.setState({controls: updatedControls});\n      console.log(this.state)\n\n    } else {\n      updatedControls ={\n        ...this.state.controls,\n        [controlName]:{\n          ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched:true\n        }\n      };\n    }\n    this.setState({controls: updatedControls});\n\n  }\n\n\n\n  render(){\n    const formElementsArray=[];\n    let valid = true;\n\n    for ( let key in this.state.controls){\n      formElementsArray.push({\n        id:key,\n        config:this.state.controls[key],\n      });\n\n      valid = (this.state.controls[key].valid) && valid;\n    }\n\n\n    let form = formElementsArray.map( formElement =>(\n      <Input\n          key={formElement.id}\n          elementType={formElement.config.elementType}\n          elementConfig={formElement.config.elementConfig}\n          value={formElement.config.value}\n          invalid={!formElement.config.valid}\n          shouldValidate={formElement.config.validation}\n          touched={formElement.config.touched}\n          changed={(event)=> this.inputChangedHandler(event, formElement.id)}\n      />\n    ));\n\n\n    return (\n      <div className='ui container'>\n        <Header />\n        <Toolbar />\n          <div className='ui three column centered grid'>\n            <div className='ui column'>\n              <div className='ui attached segment'>\n\n                <form className='ui form' onSubmit={this.submitHandler}>\n                  {form}\n                  <Button\n                    btnType='teal'\n                    disabled={!valid}>\n                    Submit\n                  </Button>\n                </form>\n              </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default Signup\n"]},"metadata":{},"sourceType":"module"}