{"ast":null,"code":"var _jsxFileName = \"/Users/seongwookang/Projects/untitled/frontend/todo/src/components/LoginDashboard/Login/Login.js\";\nimport React, { Component } from 'react';\nimport Input from '../../UI/Input/Input';\nimport Button from '../../UI/Button/Button';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Login extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Email'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      }\n    };\n\n    this.checkValidity = (value, rules) => {\n      let isValid = true;\n\n      if (!rules) {\n        return true;\n      }\n\n      if (rules.required) {\n        isValid = value.trim() && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      if (rules.isEmail) {\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        isValid = pattern.test(value) && isValid;\n      }\n\n      if (rules.isNumeric) {\n        const pattern = /^\\d+$/;\n        isValid = pattern.test(value) && isValid;\n      }\n\n      return isValid;\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n  }\n\n  render() {\n    const formElementsArray = [];\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => /*#__PURE__*/_jsxDEV(Input, {\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id)\n    }, formElement.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ui segment\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.submitHandler,\n        children: [form, /*#__PURE__*/_jsxDEV(Button, {\n          btnType: \"Success\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        btnType: \"Danger\",\n        onClick: true,\n        children: \"SignUp\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["/Users/seongwookang/Projects/untitled/frontend/todo/src/components/LoginDashboard/Login/Login.js"],"names":["React","Component","Input","Button","PropTypes","Link","Login","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","checkValidity","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","inputChangedHandler","event","controlName","updatedControls","target","setState","render","formElementsArray","key","push","id","config","form","map","formElement","submitHandler"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Input from '../../UI/Input/Input';\nimport Button from '../../UI/Button/Button';\n\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass Login extends Component {\n  state={\n    controls:{\n      email:{\n        elementType: 'input',\n        elementConfig:{\n          type: 'email',\n          placeholder: 'Email'\n        },\n        value:'',\n        validation:{\n          required:true,\n          isEmail: true,\n        },\n        valid: false,\n        touched: false\n      },\n      password:{\n        elementType: 'input',\n        elementConfig:{\n          type: 'password',\n          placeholder: 'password'\n        },\n        value:'',\n        validation:{\n          required:true,\n          minLength:6,\n        },\n        valid: false,\n        touched: false,\n      }\n    }\n  }\n\n  checkValidity=(value,rules)=>{\n    let isValid = true;\n\n    if ( !rules ) {\n      return true;\n    }\n\n    if (rules.required){\n      isValid = value.trim() && isValid;\n    }\n\n    if (rules.minLength){\n      isValid = value.length >= rules.minLength && isValid;\n    }\n\n    if (rules.maxLength){\n      isValid = value.length <= rules.maxLength && isValid;\n    }\n\n    if (rules.isEmail){\n      const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n      isValid = pattern.test( value ) && isValid\n    }\n\n    if (rules.isNumeric){\n      const pattern = /^\\d+$/;\n      isValid = pattern.test(value)&&isValid;\n    }\n    return isValid;\n  }\n\n  inputChangedHandler=(event, controlName)=>{\n    const updatedControls ={\n      ...this.state.controls,\n      [controlName]:{\n        ...this.state.controls.[controlName],\n        value: event.target.value,\n        valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\n        touched:true\n      }\n    };\n\n    this.setState({controls: updatedControls});\n  }\n\n  render(){\n    const formElementsArray=[];\n    for ( let key in this.state.controls){\n      formElementsArray.push({\n        id:key,\n        config:this.state.controls[key],\n      });\n    }\n\n    let form = formElementsArray.map( formElement =>(\n      <Input\n          key={formElement.id}\n          elementType={formElement.config.elementType}\n          elementConfig={formElement.config.elementConfig}\n          value={formElement.config.value}\n          invalid={!formElement.config.valid}\n          shouldValidate={formElement.config.validation}\n          touched={formElement.config.touched}\n          changed={(event)=> this.inputChangedHandler(event, formElement.id)}\n      />\n    ));\n\n    return (\n      <div className='ui segment'>\n        <form onSubmit={this.submitHandler}>\n          {form}\n          <Button\n            btnType='Success'>\n            Login\n          </Button>\n        </form>\n\n        <Button\n          btnType='Danger'\n          onClick\n          >\n          SignUp\n        </Button>\n      </div>\n\n\n    );\n  }\n}\nexport default Login\n"]},"metadata":{},"sourceType":"module"}